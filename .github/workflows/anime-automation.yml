name: Automatisation Anime

on:
  schedule:
    - cron: "43 4 * * *"   # pour un post à 08h00 FR
    - cron: "13 15 * * *"  # pour un post à 18h30 FR
  workflow_dispatch:


jobs:
  anime-automation:
    runs-on: windows-latest
    timeout-minutes: 120

    env:
      # Cloudinary
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}

      # Telegram
      TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}

      # Email
      RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
      RESEND_TO: ${{ secrets.RESEND_TO }}

      # Hugging Face
      HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}

      # MetriCool
      METRICOOL_EMAIL: ${{ secrets.METRICOOL_EMAIL }}
      METRICOOL_PASSWORD: ${{ secrets.METRICOOL_PASSWORD }}

    steps:
      - name: 🔍 Inventaire outils pré-installés
        run: |
          Write-Host "=== Chocolatey packages ==="
          choco list

          Write-Host "=== Versions languages ==="
          node --version
          python --version
          git --version

          Write-Host "=== Outils système ==="
          Get-Command 7z -ErrorAction SilentlyContinue
          Get-Command ffmpeg -ErrorAction SilentlyContinue
          Get-Command aria2c -ErrorAction SilentlyContinue

      - name: 📦 Checkout du code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: 📦 Installation des dépendances (avec legacy-peer-deps)
        run: npm ci --legacy-peer-deps

      # === Installation FFmpeg avec cache ===
      - name: 🎬 Cache FFmpeg
        uses: actions/cache@v4
        id: cache-ffmpeg
        with:
          path: |
            C:\ProgramData\chocolatey\lib\ffmpeg
            C:\ProgramData\chocolatey\bin\ffmpeg.exe
            C:\ProgramData\chocolatey\bin\ffprobe.exe
          key: ffmpeg-${{ runner.os }}-v2
          restore-keys: |
            ffmpeg-${{ runner.os }}-

      - name: 📦 Installer FFmpeg 7.1.1 (gyan.dev)
        if: steps.cache-ffmpeg.outputs.cache-hit != 'true'
        run: |
          Write-Host "🔽 Téléchargement de FFmpeg 7.1.1 essentials..."
          curl -L -o ffmpeg.7z https://www.gyan.dev/ffmpeg/builds/packages/ffmpeg-7.1.1-essentials_build.7z

          Write-Host "📂 Extraction..."
          7z x ffmpeg.7z -o"$env:RUNNER_TEMP\ffmpeg" -y

          Write-Host "➕ Ajout de FFmpeg au PATH"
          echo "$env:RUNNER_TEMP\ffmpeg\ffmpeg-7.1.1-essentials_build\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          Write-Host "✅ FFmpeg 7.1.1 installé"

      - name: 🧪 Vérifier installation FFmpeg
        run: |
          Write-Host "=== Test FFmpeg ==="
          ffmpeg -version | Select-String "ffmpeg version" | Select-Object -First 1
          ffprobe -version | Select-String "ffprobe version" | Select-Object -First 1

          Write-Host "=== Chemins FFmpeg ==="
          Get-Command ffmpeg | Select-Object Source
          Get-Command ffprobe | Select-Object Source

          Write-Host "✅ FFmpeg opérationnel !"

      # === Installation aria2 avec cache ===
      - name: ⚡ Cache aria2
        uses: actions/cache@v4
        id: cache-aria2
        with:
          path: |
            C:\ProgramData\chocolatey\lib\aria2
            C:\ProgramData\chocolatey\bin\aria2c.exe
          key: aria2-${{ runner.os }}-v2
          restore-keys: |
            aria2-${{ runner.os }}-

      - name: 📦 Installer aria2
        if: steps.cache-aria2.outputs.cache-hit != 'true'
        run: |
          Write-Host "🔽 Installation de aria2..."
          choco install aria2 -y --no-progress
          Write-Host "✅ aria2 installé avec succès"

      - name: 🧪 Vérifier installation aria2
        run: |
          Write-Host "=== Test aria2 ==="
          aria2c --version | Select-String "aria2 version" | Select-Object -First 1

          Write-Host "=== Chemin aria2 ==="
          Get-Command aria2c | Select-Object Source

          Write-Host "✅ aria2 opérationnel !"

      # === Vérification 7z ===
      - name: 🗜️ Vérifier installation 7z
        run: |
          Write-Host "=== Test 7z ==="
          7z | Select-String "7-Zip" | Select-Object -First 1

          Write-Host "=== Chemin 7z ==="
          Get-Command 7z | Select-Object Source

          Write-Host "✅ 7z opérationnel !"

      - name: 🔑 Générer LOGIN_HASH (Windows)
        env:
          METRICOOL_EMAIL: ${{ secrets.METRICOOL_EMAIL }}
          METRICOOL_PASSWORD: ${{ secrets.METRICOOL_PASSWORD }}
        run: |
          $output = npx tsx scripts/generate-login-hash.ts
          $loginHash = $output.Split('=')[1].Trim()
          echo "LOGIN_HASH=$loginHash" >> $env:GITHUB_ENV
        shell: pwsh


      - name: 💾 Restaurer le cookie Playwright
        uses: actions/cache@v4
        id: cookie-cache
        with:
          path: |
            cookies.json
            cookies.meta.json
          key: playwright-cookie-${{ runner.os }}-${{ env.LOGIN_HASH }}


      - name: 💾 Cache des navigateurs Playwright (Windows)
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: C:\Users\runneradmin\.cache\ms-playwright
          key: playwright-${{ runner.os }}

      - name: 🌐 Installer les navigateurs Playwright
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npm exec playwright install --with-deps


      # === Téléchargement depuis releases privées avec GitHub API ===
      - name: 🔑 Récupérer les URLs des releases privées
        id: get-release-urls
        run: |
          Write-Host "🔑 Accès aux releases du repository privé..."

          # Headers pour authentification GitHub API
          $headers = @{
            "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
            "Accept" = "application/vnd.github+json"
            "X-GitHub-Api-Version" = "2022-11-28"
            "User-Agent" = "GitHubActions/1.0"
          }

          Write-Host "📋 Récupération des releases..."

          # Variables pour stocker les URLs
          $binDownloadUrl = ""
          $modelDownloadUrl001 = ""
          $modelDownloadUrl002 = ""

          # Obtenir la release binaire v1.0-binaire
          try {
            Write-Host "🔍 Recherche release v1.0-binaire..."
            $binRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/v1.0-binaire" -Headers $headers -ErrorAction Stop
            Write-Host "✅ Release binaire trouvée: $($binRelease.name)"

            # Chercher l'asset binaire
            $binAsset = $binRelease.assets | Where-Object { $_.name -eq "Faster-Whisper-XXL_r245.4_windows.7z" }
            if ($binAsset) {
              Write-Host "✅ Asset binaire trouvé: $($binAsset.name) (Taille: $([math]::Round($binAsset.size/1MB, 2)) MB)"
              $binDownloadUrl = $binAsset.url
            } else {
              Write-Host "❌ Asset binaire 'Faster-Whisper-XXL_r245.4_windows.7z' non trouvé dans la release"
              Write-Host "Assets disponibles:"
              $binRelease.assets | ForEach-Object { Write-Host "  - $($_.name)" }
            }
          } catch {
            Write-Host "❌ Erreur lors de l'accès à la release v1.0-binaire:"
            Write-Host "   $($_.Exception.Message)"
            if ($_.Exception.Response.StatusCode -eq 404) {
              Write-Host "   → La release 'v1.0-binaire' n'existe pas"
            }
          }

          # Obtenir la release modèle v1.0-model
          try {
            Write-Host "🔍 Recherche release v1.0-model..."
            $modelRelease = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/releases/tags/v1.0-model" -Headers $headers -ErrorAction Stop
            Write-Host "✅ Release modèle trouvée: $($modelRelease.name)"

            # Chercher les assets du modèle
            $modelAsset1 = $modelRelease.assets | Where-Object { $_.name -eq "Faster-Whisper-XXL_r245.4_windows.7z.001" }
            $modelAsset2 = $modelRelease.assets | Where-Object { $_.name -eq "Faster-Whisper-XXL_r245.4_windows.7z.002" }

            if ($modelAsset1) {
              Write-Host "✅ Asset modèle partie 1 trouvé: $($modelAsset1.name) (Taille: $([math]::Round($modelAsset1.size/1MB, 2)) MB)"
              $modelDownloadUrl001 = $modelAsset1.url
            } else {
              Write-Host "❌ Asset modèle partie 1 non trouvé"
            }

            if ($modelAsset2) {
              Write-Host "✅ Asset modèle partie 2 trouvé: $($modelAsset2.name) (Taille: $([math]::Round($modelAsset2.size/1MB, 2)) MB)"
              $modelDownloadUrl002 = $modelAsset2.url
            } else {
              Write-Host "❌ Asset modèle partie 2 non trouvé"
            }

            if (!$modelAsset1 -and !$modelAsset2) {
              Write-Host "Assets disponibles dans v1.0-model:"
              $modelRelease.assets | ForEach-Object { Write-Host "  - $($_.name)" }
            }
          } catch {
            Write-Host "❌ Erreur lors de l'accès à la release v1.0-model:"
            Write-Host "   $($_.Exception.Message)"
            if ($_.Exception.Response.StatusCode -eq 404) {
              Write-Host "   → La release 'v1.0-model' n'existe pas"
            }
          }

          # Exporter les URLs vers les variables d'environnement pour les étapes suivantes
          echo "BIN_DOWNLOAD_URL=$binDownloadUrl" >> $env:GITHUB_ENV
          echo "MODEL_DOWNLOAD_URL_001=$modelDownloadUrl001" >> $env:GITHUB_ENV
          echo "MODEL_DOWNLOAD_URL_002=$modelDownloadUrl002" >> $env:GITHUB_ENV

          Write-Host ""
          Write-Host "📊 Résumé des URLs récupérées:"
          Write-Host "  Binaire: $(if($binDownloadUrl) { '✅ Disponible' } else { '❌ Manquant' })"
          Write-Host "  Modèle part 1: $(if($modelDownloadUrl001) { '✅ Disponible' } else { '❌ Manquant' })"
          Write-Host "  Modèle part 2: $(if($modelDownloadUrl002) { '✅ Disponible' } else { '❌ Manquant' })"

      # === Cache et téléchargement binaire ===
      - name: 💾 Cache Faster-Whisper Binaire
        uses: actions/cache@v4
        id: cache-binaire
        with:
          path: models/Faster-Whisper-XXL_r245.4_windows
          key: fw-binaire-${{ runner.os }}-v3

      - name: ⬇️ Télécharger & extraire Binaire (GitHub API)
        if: steps.cache-binaire.outputs.cache-hit != 'true'
        run: |
          Write-Host "📁 Création du dossier models..."
          New-Item -ItemType Directory -Path models -Force

          if ($env:BIN_DOWNLOAD_URL -and $env:BIN_DOWNLOAD_URL -ne "") {
            Write-Host "⬇️ Téléchargement du binaire via GitHub API..."

            $headers = @{
              "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
              "Accept" = "application/octet-stream"
              "User-Agent" = "GitHubActions/1.0"
            }

            try {
              Write-Host "🔗 URL de téléchargement: $env:BIN_DOWNLOAD_URL"

              # Téléchargement avec barre de progression
              $ProgressPreference = 'Continue'
              Invoke-WebRequest -Uri $env:BIN_DOWNLOAD_URL -Headers $headers -OutFile "models\Faster-Whisper-XXL_r245.4_windows.7z" -Verbose

              if (Test-Path "models\Faster-Whisper-XXL_r245.4_windows.7z") {
                $fileSize = (Get-Item "models\Faster-Whisper-XXL_r245.4_windows.7z").Length
                Write-Host "✅ Téléchargement binaire réussi (Taille: $([math]::Round($fileSize/1MB, 2)) MB)"

                Write-Host "📦 Extraction du binaire..."
                7z x models\Faster-Whisper-XXL_r245.4_windows.7z -omodels -y

                if ($LASTEXITCODE -eq 0) {
                  Write-Host "✅ Binaire extrait avec succès"

                  # Vérifier le contenu extrait
                  if (Test-Path "models\Faster-Whisper-XXL_r245.4_windows") {
                    Write-Host "📂 Contenu extrait:"
                    Get-ChildItem "models\Faster-Whisper-XXL_r245.4_windows" -Recurse | Select-Object Name, Length | Format-Table -AutoSize
                  }
                } else {
                  Write-Host "❌ Échec de l'extraction (code: $LASTEXITCODE)"
                  exit 1
                }
              } else {
                Write-Host "❌ Fichier binaire non créé après téléchargement"
                exit 1
              }
            } catch {
              Write-Host "❌ Erreur lors du téléchargement binaire:"
              Write-Host "   $($_.Exception.Message)"
              if ($_.Exception.Response) {
                Write-Host "   Status: $($_.Exception.Response.StatusCode)"
                Write-Host "   Reason: $($_.Exception.Response.ReasonPhrase)"
              }
              exit 1
            }
          } else {
            Write-Host "⚠️ URL de téléchargement binaire non disponible"
            Write-Host "   Vérifiez que la release 'v1.0-binaire' existe et contient le fichier 'Faster-Whisper-XXL_r245.4_windows.7z'"
            Write-Host "   Continuons sans ce fichier..."
          }

      # === Cache et téléchargement modèle ===
      - name: 💾 Cache Faster-Whisper Modèle
        uses: actions/cache@v4
        id: cache-modele
        with:
          path: models/Faster-Whisper-XXL_r245.4_windows
          key: fw-modele-${{ runner.os }}-v3

      - name: ⬇️ Télécharger & extraire Modèle (2 parties via GitHub API)
        if: steps.cache-modele.outputs.cache-hit != 'true'
        run: |
          $headers = @{
            "Authorization" = "Bearer ${{ secrets.GITHUB_TOKEN }}"
            "Accept" = "application/octet-stream"
            "User-Agent" = "GitHubActions/1.0"
          }

          $download1Success = $false
          $download2Success = $false

          # Téléchargement partie 1
          if ($env:MODEL_DOWNLOAD_URL_001 -and $env:MODEL_DOWNLOAD_URL_001 -ne "") {
            Write-Host "⬇️ Téléchargement modèle partie 1 via GitHub API..."
            try {
              $ProgressPreference = 'Continue'
              Invoke-WebRequest -Uri $env:MODEL_DOWNLOAD_URL_001 -Headers $headers -OutFile "models\Faster-Whisper-XXL_r245.4_windows.7z.001" -Verbose

              if (Test-Path "models\Faster-Whisper-XXL_r245.4_windows.7z.001") {
                $fileSize = (Get-Item "models\Faster-Whisper-XXL_r245.4_windows.7z.001").Length
                Write-Host "✅ Partie 1 téléchargée (Taille: $([math]::Round($fileSize/1MB, 2)) MB)"
                $download1Success = $true
              }
            } catch {
              Write-Host "❌ Erreur téléchargement partie 1: $($_.Exception.Message)"
            }
          } else {
            Write-Host "⚠️ URL partie 1 non disponible"
          }

          # Téléchargement partie 2
          if ($env:MODEL_DOWNLOAD_URL_002 -and $env:MODEL_DOWNLOAD_URL_002 -ne "") {
            Write-Host "⬇️ Téléchargement modèle partie 2 via GitHub API..."
            try {
              $ProgressPreference = 'Continue'
              Invoke-WebRequest -Uri $env:MODEL_DOWNLOAD_URL_002 -Headers $headers -OutFile "models\Faster-Whisper-XXL_r245.4_windows.7z.002" -Verbose

              if (Test-Path "models\Faster-Whisper-XXL_r245.4_windows.7z.002") {
                $fileSize = (Get-Item "models\Faster-Whisper-XXL_r245.4_windows.7z.002").Length
                Write-Host "✅ Partie 2 téléchargée (Taille: $([math]::Round($fileSize/1MB, 2)) MB)"
                $download2Success = $true
              }
            } catch {
              Write-Host "❌ Erreur téléchargement partie 2: $($_.Exception.Message)"
            }
          } else {
            Write-Host "⚠️ URL partie 2 non disponible"
          }

          # Extraction si les deux parties sont téléchargées
          if ($download1Success -and $download2Success) {
            Write-Host "📦 Extraction du modèle multi-parties..."
            try {
              7z x models\Faster-Whisper-XXL_r245.4_windows.7z.001 -omodels -y
              if ($LASTEXITCODE -eq 0) {
                Write-Host "✅ Modèle extrait avec succès"

                # Vérifier le contenu extrait
                if (Test-Path "models\Faster-Whisper-XXL_r245.4_windows") {
                  Write-Host "📂 Contenu extrait:"
                  Get-ChildItem "models\Faster-Whisper-XXL_r245.4_windows" -Recurse | Select-Object Name, Length | Format-Table -AutoSize
                }
              } else {
                Write-Host "❌ Échec de l'extraction (code: $LASTEXITCODE)"
                exit 1
              }
            } catch {
              Write-Host "❌ Erreur lors de l'extraction: $($_.Exception.Message)"
              exit 1
            }
          } else {
            Write-Host "⚠️ Téléchargement du modèle incomplet"
            Write-Host "   Part 1: $(if($download1Success) { '✅' } else { '❌' })"
            Write-Host "   Part 2: $(if($download2Success) { '✅' } else { '❌' })"
            Write-Host "   Vérifiez que la release 'v1.0-model' existe et contient les fichiers .001 et .002"
            Write-Host "   Continuons sans ce fichier..."
          }

      # === Pipeline vidéo ===
      - name: 🎵 Étape 1 - Téléchargement voix aléatoire
        run: npm run start

      - name: 🎬 Étape 2 - Sélection des clips anime
        run: npm run select-clips

      - name: 🔗 Étape 3 - Concaténation clips avec transitions
        run: npm run concat-clips

      - name: ✨ Étape 4 - Application effets TikTok
        run: npm run ffmpeg-tiktok-effects

      - name: 🎵 Étape 5 - Téléchargement OST aléatoire
        run: npm run download-random-ost

      - name: 📝 Étape 6 - Génération des sous-titres
        run: npm run generate-subs

      - name: 🧹 Étape 7 - Nettoyage des sous-titres
        run: npm run clean-subs

      - name: ✍️ Étape 8 - Génération drawtext
        run: npm run generate-drawtext

      - name: 📖 Étape 9 - Ajout des sous-titres
        run: npm run add-subtitles

      - name: 🔊 Étape 10 - Mixage audio
        run: npm run mix-audio

      - name: 🤖 Étape 11 - Analyse contexte pour emojis
        run: npm run contextual-emoji

      - name: ⬇️ Étape 12 - Télécharger emojis animés
        run: npm run download-animated-emojis

      - name: 😃 Étape 13 - Appliquer emojis animés sur la vidéo
        run: npm run apply-emoji-ffmpeg

      # === Upload & publication ===
      - name: ☁️ Upload Cloudinary
        run: npm run upload-to-cloudinary

      - name: 📱 Publication TikTok
        run: npm run put-to-tiktok
        env:
          CHROMIUM_FLAGS: "--no-sandbox --disable-setuid-sandbox --disable-dev-shm-usage --disable-gpu --disable-web-security --disable-features=VizDisplayCompositor"

      # === Artifacts ===
      - name: 💾 Sauvegarde vidéo finale
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: anime-video-${{ github.run_number }}
          path: |
            output.mp4
            output_video.mp4
            output_pre_final.mp4
            output_final.mp4
            output_with_emojis.mp4
          retention-days: 7

      - name: 💾 Sauvegarde JSON
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: json-public-subs
          path: |
            public/*.json
            subs/*.json
          retention-days: 7

      - name: 💾 Sauvegarde logs
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: logs-${{ github.run_number }}
          path: |
            *.log
            logs/
            cloudinary-link.txt
          retention-days: 3

      - name: 📢 Notifier Telegram (Succès ou Échec)
        if: always()
        run: |
          $status = "${{ job.status }}"
          $msg = if ($status -eq "success") { "✅ Automatisation Animé terminée avec succès !" } else { "❌ Échec Automatisation Animé !" }
          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" `
            -d chat_id=${{ secrets.TELEGRAM_TO }} `
            -d text="$msg`nWorkflow: ${{ github.workflow }}`nJob: ${{ github.job }}`nCommit: ${{ github.sha }}`nAuteur: ${{ github.actor }}`nLien: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: 📧 Envoyer mail stylisé React Email + Tailwind via Resend
        if: always()
        run: npm run send-email
        env:
          RESEND_API_KEY: ${{ secrets.RESEND_API_KEY }}
          RESEND_TO: ${{ secrets.RESEND_TO }}
          STATUS: ${{ job.status }}
          STATUS_EMOJI: ${{ job.status == 'success' && '🎉' || '💥' }}
          GITHUB_WORKFLOW: ${{ github.workflow }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_SHA: ${{ github.sha }}
          GITHUB_SERVER_URL: ${{ github.server_url }}
          GITHUB_RUN_ID: ${{ github.run_id }}

      # === Nettoyage ===
      - name: 🧹 Nettoyage fichiers temporaires
        if: always()
        run: |
          if (Test-Path temp) { Remove-Item -Recurse -Force temp }
          if (Test-Path cache) { Remove-Item -Recurse -Force cache }
          Get-ChildItem -Recurse -Include *.tmp, *.temp -ErrorAction SilentlyContinue | Remove-Item -Force

      - name: 💾 Sauvegarder le cookie Playwright (Windows)
        uses: actions/cache@v4
        with:
          path: |
            cookies.json
            cookies.meta.json
          key: playwright-cookie-${{ runner.os }}-${{ env.LOGIN_HASH }}

      - name: 💾 Sauvegarder le cache des navigateurs Playwright (Windows)
        uses: actions/cache@v4
        with:
          path: C:\Users\runneradmin\.cache\ms-playwright
          key: playwright-${{ runner.os }}

